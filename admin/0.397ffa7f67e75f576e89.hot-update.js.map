{"version":3,"file":"0.397ffa7f67e75f576e89.hot-update.js","sources":["webpack:///./src/components/MapNavigation/MapNavigation.js"],"sourcesContent":["import React, { Component, useState } from \"react\"\nimport styled from \"styled-components\"\nimport ImageMapper from \"./ImageMapper\"\nimport { unescapeWithRegexp } from \"../../utils/escape\"\nimport { Box } from \"rebass\"\nimport Button from \"../button\"\n\nconst MobileBox = styled(Box)`\n  display: none;\n  width: 100%;\n\n  @media (max-width: 640px) {\n    display: block;\n  }\n`\nconst MapBox = styled(Box)`\n  @media (max-width: 640px) {\n    display: none;\n  }\n`\nconst AreaTag = styled.span`\n  position: absolute;\n  color: #fff;\n  padding: 10px;\n  background: rgba(0, 0, 0, 0.8);\n  transform: translate3d(-50%, -50%, 0);\n  border-radius: 5px;\n  pointer-events: none;\n  z-index: 1000;\n`\n\nexport default class MapNavigation extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  state = {\n    areaCoords: null,\n  }\n\n  componentDidMount() {\n    if (this.mapper && this.mapper.computeCenter) {\n      const areaCoords = (JSON.parse(\n        unescapeWithRegexp(this.props.map)\n      ).areas || []).reduce((accum, area) => {\n        area.coords = JSON.parse(area.coords)\n        accum[area.name] = this.mapper.computeCenter(area)\n        return accum\n      }, {})\n      this.setState({ areaCoords })\n    }\n  }\n\n  render() {\n    const { imageSrc, map: mapString, alt } = this.props\n    var map = \"\"\n    try {\n      map = JSON.parse(unescapeWithRegexp(mapString))\n    } catch (ex) {}\n\n    if (map && Array.isArray(map.areas)) {\n      map.areas.forEach(area => {\n        area.coords = JSON.parse(area.coords)\n      })\n    } else {\n      map.areas = []\n    }\n\n    return (\n      <>\n        <MapBox {...this.props}>\n          <div style={{ position: \"relative\" }}>\n            {imageSrc && (\n              <ImageMapper\n                ref={mapper => (this.mapper = mapper)}\n                src={imageSrc}\n                map={map}\n                alt={alt}\n                key=\"mapper\"\n              />\n            )}\n            {this.mapper &&\n              this.state.areaCoords &&\n              !this.props.hideTag &&\n              map.areas.map(area => {\n                const coords = this.state.areaCoords[area.name]\n                return (\n                  <AreaTag\n                    key={area.name}\n                    alt={area.name}\n                    style={{ top: `${coords[1]}px`, left: `${coords[0]}px` }}\n                  >\n                    {area.name}\n                  </AreaTag>\n                )\n              })}\n          </div>\n        </MapBox>\n        <MobileBox>\n          {map.areas.map(item => (\n            <Button\n              as=\"a\"\n              href={item.href}\n              style={{ color: \"#FFF\" }}\n              width=\"100%\"\n              mb=\"12px\"\n            >\n              {item.name}\n            </Button>\n          ))}\n        </MobileBox>\n      </>\n    )\n  }\n}\n"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+BA;;;;;A","sourceRoot":""}